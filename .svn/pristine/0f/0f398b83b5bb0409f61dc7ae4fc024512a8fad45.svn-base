//
//  QMUIStaticTableViewCellData.h
//  qmui
//
//  Created by MoLice on 15/5/3.
//  Copyright (c) 2015年 QMUI Team. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>
#import "QMUIHelper.h"

@class QMUITableViewCell;

typedef NS_ENUM(NSInteger, QMUIStaticTableViewCellAccessoryType) {
    QMUIStaticTableViewCellAccessoryTypeNone,
    QMUIStaticTableViewCellAccessoryTypeDisclosureIndicator,
    QMUIStaticTableViewCellAccessoryTypeDetailDisclosureButton,
    QMUIStaticTableViewCellAccessoryTypeCheckmark,
    QMUIStaticTableViewCellAccessoryTypeDetailButton,
    QMUIStaticTableViewCellAccessoryTypeSwitch,
};

/**
 *  一个 cellData 对象用于存储 static tableView（例如设置界面那种列表） 列表里的一行 cell 的基本信息，包括这个 cell 的 class、text、detailText、accessoryView 等。
 *
 *  通常，需要用到 static tableView 的界面会自己创建一个二维数组（NSArray<NSArray<QMUIStaticTableViewCellData *> *> *）代表这个界面的所有内容，其中一维表示 section，二维表示 section 里的 rows，然后在该界面的若干个 UITableViewDataSource、UITableViewDelegate 方法里调用对应的 QMUIHelper (StaticTableView) 类方法，即可完成一个 static tableView 的展示及数据维护。
 */
@interface QMUIStaticTableViewCellData : NSObject

/// 当前 cellData 的标志，一般同个 tableView 里的每个 cellData 都会拥有不相同的 identifier
@property(nonatomic, assign) NSInteger identifier;

/// 当前 cellData 所对应的 indexPath，要通过 [QMUIHelper staticTableCellDataInDataSource:indexPath:] 返回过的 cellData 的 indexPath 属性才是正确被赋值的
@property(nonatomic, strong, readonly) NSIndexPath *indexPath;

/// init cell 时要使用的 style
@property(nonatomic, assign) UITableViewCellStyle style;

/// cell 左边要显示的图片，将会被设置到 cell.imageView.image
@property(nonatomic, strong) UIImage *image;

/// cell 的文字，将会被设置到 cell.textLabel.text
@property(nonatomic, copy) NSString *text;

/// cell 的详细文字，将会被设置到 cell.detailTextLabel.text，所以要求 cellData.style 的值必须是带 detailTextLabel 类型的 style
@property(nonatomic, copy) NSString *detailText;

/// cell 右边的 accessoryView 的类型
@property(nonatomic, assign) QMUIStaticTableViewCellAccessoryType accessoryType;

/// 配合 cellData.accessoryType 使用，不同的 accessoryType 需要配合不同类型的 accessoryValueObject 使用。例如如果 accessoryType = QMUIStaticTableViewCellAccessoryTypeSwitch，则 accessoryValueObject 必须传一个 @YES 或 @NO 用于控制 UISwitch.on 属性。
/// @warning 目前也仅支持与 QMUIStaticTableViewCellAccessoryTypeSwitch 搭配使用。
@property(nonatomic, strong) NSObject *accessoryValueObject;

/// 当 cell 的点击事件（或 accessoryView 的事件）被触发时，要由哪个对象来接收
@property(nonatomic, assign) id actionTarget;

/// 当 cell 的点击事件（或 accessoryView 的事件）被触发时，要向 actionTarget 指针发送什么消息以响应事件
/// @warning 一般情况下作为 action 的 selector 接收一个参数，这个参数也即当前的 QMUIStaticTableViewCellData 对象。特殊地，对 QMUIStaticTableViewCellAccessoryTypeSwitch 类型的 selector 第一个参数传的是 UISwitch 对象。
@property(nonatomic, assign) SEL action;

+ (instancetype)staticTableViewCellDataWithIdentifier:(NSInteger)identifier
                                                image:(UIImage *)image
                                                 text:(NSString *)text
                                           detailText:(NSString *)detailText
                                        accessoryType:(QMUIStaticTableViewCellAccessoryType)accessoryType
                                               target:(id)target
                                               action:(SEL)action;

+ (instancetype)staticTableViewCellDataWithIdentifier:(NSInteger)identifier
                                                style:(UITableViewCellStyle)style
                                                image:(UIImage *)image
                                                 text:(NSString *)text
                                           detailText:(NSString *)detailText
                                        accessoryType:(QMUIStaticTableViewCellAccessoryType)accessoryType
                                 accessoryValueObject:(NSObject *)accessoryValueObject
                                               target:(id)target
                                               action:(SEL)action;

+ (UITableViewCellAccessoryType)tableViewCellAccessoryTypeWithStaticAccessoryType:(QMUIStaticTableViewCellAccessoryType)type;
@end


@interface QMUIHelper (StaticTableView)

/**
 *  从 dataSource 里获取处于 indexPath 位置的 QMUIStaticTableViewCellData 对象
 *  @param dataSource 整个列表的数据，是一个二维数组，其中第一维度表示 section，第二维度表示对应 section 里的 rows
 *  @param indexPath cell 所处的位置
 */
+ (QMUIStaticTableViewCellData *)staticTableCellDataInDataSource:(NSArray<NSArray<QMUIStaticTableViewCellData *> *> *)dataSource withIndexPath:(NSIndexPath *)indexPath;

/**
 *  根据 dataSource 计算出指定的 indexPath 的 cell 所对应的 reuseIdentifier
 *  @param indexPath cell 所处的位置
 *  @param dataSource 整个列表的数据，是一个二维数组，其中第一维度表示 section，第二维度表示对应 section 里的 rows
 */
+ (NSString *)staticTableViewReuseIdentifierAtIndexPath:(NSIndexPath *)indexPath withDataSource:(NSArray<NSArray<QMUIStaticTableViewCellData *> *> *)dataSource;

/**
 *  用于结合 indexPath 和 dataSource 生成 cell 的方法
 *  @param tableView 目标 tableView
 *  @prama indexPath 当前 cell 的 indexPath
 *  @param cellClass cell 的 Class，必须为 QMUITableViewCell 或它的 subclass
 *  @param dataSource 整个列表的数据，是一个二维数组，其中第一维度表示 section，第二维度表示对应 section 里的 rows
 */
+ (QMUITableViewCell *)staticTableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath ofClass:(Class)cellClass withDataSource:(NSArray<NSArray<QMUIStaticTableViewCellData *> *> *)dataSource;

/**
 *  用于结合 indexPath 和 dataSource 生成 cell 的方法，其中 cell 使用的是 QMUITableViewCell
 *  @param tableView 目标 tableView
 *  @prama indexPath 当前 cell 的 indexPath
 *  @param dataSource 整个列表的数据，是一个二维数组，其中第一维度表示 section，第二维度表示对应 section 里的 rows
 */
+ (QMUITableViewCell *)staticTableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath withDataSource:(NSArray<NSArray<QMUIStaticTableViewCellData *> *> *)dataSource;

/**
 *  在 tableView:didSelectRowAtIndexPath: 里调用，可从 dataSource 里读取对应 indexPath 的 cellData，然后触发其中的 target 和 action
 *  @param tableView 目标 tableView
 *  @param indexPath 当前 cell 的 indexPath
 *  @param dataSource 整个列表的数据，是一个二维数组，其中第一维度表示 section，第二维度表示对应 section 里的 rows
 */
+ (void)staticTableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath withDataSource:(NSArray<NSArray<QMUIStaticTableViewCellData *> *> *)dataSource;
@end
